<class
    name = "zpipes_server"
    title = "ZPIPES server"
    proto = "zpipes_msg"
    script = "zproto_server_c"
    include = "../include/zbroker.h"
    >
    This is a server implementation for the ZPIPES protocol
    <include filename = "license.xml" />

    <!-- State machine for a client connection -->
    
    Names of states, events, and actions are case insensitive.
    By convention however we use uppercase for protocol events.

    <state name = "start" inherit = "external">
        <event name = "OUTPUT" next = "before writing">
            <action name = "lookup or create pipe" />
            <action name = "open pipe writer" />
        </event>
        <event name = "INPUT" next = "before reading">
            <action name = "lookup or create pipe" />
            <action name = "open pipe reader" />
        </event>
    </state>
        
    <state name = "before writing">
        <event name = "ok" next = "writing">
            <action name = "send" message = "OUTPUT OK" />
        </event>
        <event name = "error">
            <action name = "send" message = "OUTPUT FAILED" />
            <action name = "terminate" />
        </event>
    </state>

    <state name = "writing" inherit = "external">
        <event name = "WRITE" next = "processing write">
            <action name = "process write request" />
        </event>
        <!-- Does not affect writer state -->
        <event name = "READ">
            <action name = "send" message = "INVALID" />
        </event>
        <event name = "CLOSE" next = "start">
            <action name = "close pipe writer" />
            <action name = "send" message = "CLOSE OK" />
        </event>
        <event name = "expired">
            <action name = "close pipe writer" />
            <action name = "terminate" />
        </event>
        <!-- We get this if a reader closed their end of the pipe -->
        <event name = "reader dropped">
            <action name = "close pipe writer" />
        </event>
    </state>

    In this internal state, we either have a reader immediately, or
    we get a wakeup event after the specified write timeout.

    <state name = "processing write" inherit = "internal">
        <!-- either immediately, or when a reader arrives -->
        <event name = "have reader" next = "writing">
            <action name = "pass data to reader" />
            <action name = "send" message = "WRITE OK" />
        </event>
        <!-- alarm wakeup event if nothing else happens -->
        <event name = "wakeup" next = "writing">
            <action name = "send" message = "WRITE TIMEOUT" />
        </event>
        <event name = "CLOSE" next = "start">
            <action name = "send" message = "WRITE FAILED" />
            <action name = "close pipe writer" />
            <action name = "send" message = "CLOSE OK" />
        </event>
        <event name = "expired">
            <action name = "close pipe writer" />
            <action name = "terminate" />
        </event>
        <!-- Pipe has been closed by reader, so discard data -->
        <event name = "pipe shut" next = "writing">
            <action name = "send" message = "WRITE FAILED" />
        </event>
        <!-- We get this if a reader closed their end of the pipe -->
        <event name = "reader dropped">
            <action name = "close pipe writer" />
        </event>
    </state>

    <state name = "before reading">
        <event name = "ok" next = "reading">
            <action name = "send" message = "INPUT OK" />
        </event>
        <event name = "error">
            <action name = "send" message = "INPUT FAILED" />
            <action name = "terminate" />
        </event>
    </state>
    
    Reading from a pipe waits until there is sufficient data, or a timeout.
    In this state we can also close the pipe.

    <state name = "reading" inherit = "external">
        <event name = "READ" next = "processing read">
            <action name = "process read request" />
        </event>
        <!-- Does not affect reader state -->
        <event name = "WRITE">
            <action name = "send" message = "INVALID" />
        </event>
        <event name = "CLOSE" next = "start">
            <action name = "close pipe reader" />
            <action name = "send" message = "CLOSE OK" />
        </event>
        <event name = "expired">
            <action name = "close pipe reader" />
            <action name = "terminate" />
        </event>
        <!-- We get this if a writer closed their end of the pipe -->
        <event name = "writer dropped">
            <action name = "close pipe reader" />
        </event>
    </state>

    In this internal state, we either have data immediately, or a we are
    woken up after the specified read timeout, or the writer closed our
    pipe.

    <state name = "processing read" inherit = "internal">
        <!-- Either immediately, or when data arrives -->
        <event name = "have data" next = "reading">
            <action name = "collect data to send" />
            <action name = "send" message = "READ OK" />
        </event>
        <!-- Exception event if not enough data yet -->
        <event name = "not enough data" />
        <!-- Client asked for zero bytes -->
        <event name = "zero read" next = "reading">
            <action name = "send" message = "READ END" />
        </event>
        <!-- Pipe has been closed by writer -->
        <event name = "pipe shut" next = "reading">
            <action name = "send" message = "READ END" />
        </event>

        <!-- alarm wakeup event if nothing else happens -->
        <event name = "wakeup" next = "reading">
            <action name = "send" message = "READ TIMEOUT" />
        </event>
        <event name = "CLOSE" next = "start">
            <action name = "send" message = "READ FAILED" />
            <action name = "close pipe reader" />
            <action name = "send" message = "CLOSE OK" />
        </event>
        <event name = "expired">
            <action name = "close pipe reader" />
            <action name = "terminate" />
        </event>
        <!-- We get this if a writer closed their end of the pipe -->
        <event name = "writer dropped" next = "reading">
            <action name = "close pipe reader" />
            <action name = "collect data to send" />
            <action name = "send" message = "READ OK" />
        </event>
    </state>

    This superstate defines default handling for external states:

    <state name = "external">
        <!-- PING is always valid in external states -->
        <event name = "PING">
            <action name = "send" message = "PING OK" />
        </event>
        <!-- All other protocol messages are invalid -->
        <event name = "*">
            <action name = "send" message = "INVALID" />
            <action name = "terminate" />
        </event>
        <!-- We get this if a writer arrives; ignore it -->
        <event name = "have writer" />
        <!-- We get this if a reader arrives; ignore it -->
        <event name = "have reader" />
        <!-- We get this if a writer sends data; ignore it -->
        <event name = "have data" />
        <!-- This built-in event hits on a connection timeout -->
        <event name = "expired">
            <action name = "terminate" />
        </event>
    </state>

    This superstate defines default handling for internal states:

    <state name = "internal">
        <event name = "PING">
            <action name = "send" message = "PING OK" />
        </event>
    </state>
</class>
