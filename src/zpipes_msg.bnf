The following ABNF grammar defines the ZPIPES protocol:

    ZPIPES = reader | writer

    reader = input-command *read-command close-command
    input-command = c:input ( s:input-ok | s:failed )
    fetch-command = c:read ( s:read-ok | s:empty | s:timeout | s:failed )
    close-command = c:close ( s:close-ok | s:failed )

    writer = output-command *write-command close-command
    output = c:output ( s:output-ok | s:failed )
    store = c:write ( s:write-ok | s:failed )

    ;         Create a new pipe for reading
    input           = signature %d1 pipename
    signature       = %xAA %xA0             ; two octets
    pipename        = string                ; Name of pipe

    ;         Input request was successful
    input_ok        = signature %d2

    ;         Input or output request failed
    failed          = signature %d3 reason
    reason          = string                ; Reason for failure

    ;         Create a new pipe for writing
    output          = signature %d4 pipename
    pipename        = string                ; Name of pipe

    ;         Output request was successful
    output_ok       = signature %d5

    ;         Read a chunk of data from pipe
    read            = signature %d6 size timeout
    size            = number-4              ; Number of bytes to read
    timeout         = number-4              ; Timeout, msecs, or zero

    ;         Read was successful
    read_ok         = signature %d7 chunk
    chunk           = chunk                 ; Chunk of data

    ;         Pipe is closed, no more data
    end_of_pipe     = signature %d8

    ;         Read or write ended with timeout
    timeout         = signature %d9

    ;         Write chunk of data to pipe
    write           = signature %d10 chunk timeout
    chunk           = chunk                 ; Chunk of data
    timeout         = number-4              ; Timeout, msecs, or zero

    ;         Write was successful
    write_ok        = signature %d11

    ;         Close pipe
    close           = signature %d12

    ;         Close was successful
    close_ok        = signature %d13

    ; A chunk has 4-octet length + binary contents
    chunk           = number-4 *OCTET

    ; Strings are always length + text contents
    string          = number-1 *VCHAR

    ; Numbers are unsigned integers in network byte order
    number-1        = 1OCTET
    number-4        = 4OCTET
