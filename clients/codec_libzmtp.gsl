.template 0
#   Generates a codec for a protocol specification
#   Targets raw C without CZMQ, does encode/decode only
#
include "zproto_lib.gsl"
resolve_includes ()
expand_headers ()
set_defaults ()
.endtemplate
.output "$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title:)
    
    Codec header for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

/*  These are the $(class.name) messages:
.for message

    $(NAME) - $(string.trim (.?''):left)
.   for field
.       if type = "number"
        $(name)             $(type) $(size)\
                                        $(field.?'':)
.       elsif type = "octets"
        $(name)             $(type) [$(size)]\
                                        $(field.?'':)
.       else
        $(name)             $(type)     $(field.?'':)
.       endif
.   endfor
.endfor
*/

.for define
#define $(CLASS.NAME)_$(DEFINE.NAME:C)      $(value)
.endfor

.for message
#define $(CLASS.NAME)_$(MESSAGE.NAME)       $(id)
.endfor
.for class.field where type = "octets"
#define $(CLASS.NAME)_$(FIELD.NAME)_SIZE    $(size)
.endfor

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  @interface
//  Create a new $(class.name)
$(class.name)_t *
    $(class.name)_new (int id);

//  Destroy the $(class.name)
void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Parse a $(class.name) from zmtp_msg_t. Returns a new object, or NULL 
//  if the message could not be parsed, or was NULL. Nullifies the msg
//  reference.
$(class.name)_t *
    $(class.name)_decode (zmtp_msg_t **msg_p);

//  Encode $(class.name) into a message. Returns a newly created object
//  or NULL if error. Use when not in control of sending the message.
//  Destroys the $(class.name)_t instance.
zmtp_msg_t *
    $(class.name)_encode ($(class.name)_t **self_p);

//  Receive and parse a $(class.name) from the socket. Returns new object,
//  or NULL if error. Will block if there's no message waiting.
CZMQ_EXPORT $(class.name)_t *
    $(class.name)_recv (zmtp_dealer_t *input);

//  Send the $(class.name) to the output, and destroy it
CZMQ_EXPORT int
    $(class.name)_send ($(class.name)_t **self_p, zmtp_dealer_t *output);

.for message
//  Send the $(message.NAME) to the output in one step
CZMQ_EXPORT int
    $(class.name)_send_$(name) (zmtp_dealer_t *output\
.for field where !defined (value)
.   if defined (message.has_msg)
.       echo "E: 'msg' field must be last in the message"
.   endif
,
.   if type = "number"
        $(ctype) $(name)\
.   elsif type = "octets"
        byte *$(name)\
.   elsif type = "string" | type = "longstr"
        const char *$(name)\
.   elsif type = "chunk"
        zchunk_t *$(name)\
.   endif
.endfor
);

.endfor
//  Duplicate the $(class.name) message
$(class.name)_t *
    $(class.name)_dup ($(class.name)_t *self);

//  Print contents of message to stdout
void
    $(class.name)_dump ($(class.name)_t *self);

//  Get the $(class.name) id and printable command
int
    $(class.name)_id ($(class.name)_t *self);
void
    $(class.name)_set_id ($(class.name)_t *self, int id);
const char *
    $(class.name)_command ($(class.name)_t *self);

.for class.field where !defined (value)
.   if type = "number"
//  Get/set the $(name) field
$(ctype)
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name));
.#
.   elsif type = "octets"
//  Get/set the $(name) field
byte *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name));
.#
.   elsif type = "string" | type = "longstr"
//  Get/set the $(name) field
const char *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_set_$(name) ($(class.name)_t *self, const char *format, ...);
.#
.   elsif type = "chunk"
//  Get a copy of the $(name) field
z$(type)_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
z$(type)_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
void
    $(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t **$(type)_p);
.#
.   else
.       echo "E: unknown type '$(type)' for field '$(name)'"
.   endif

.endfor
//  Self test of this class
int
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.output "$(class.name).c"
/*  =========================================================================
    $(class.name) - $(class.title:)

    Codec class for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************
    
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(class.name) - $(class.title:)
@discuss
@end
*/

#include <zmtp.h>
#include "zchunk.h"
#include "$(class.name).h"

//  Structure of our class

struct _$(class.name)_t {
    int id;                             //  $(class.name) message ID
    byte *needle;                       //  Read/write pointer for serialization
    byte *ceiling;                      //  Valid upper limit for read pointer
.for class.field
.   if type = "number"
    $(ctype) $(name);                   //  $(field.?'':)
.   elsif type = "octets"
    byte $(name) [$(size)];             //  $(field.?'':)
.   elsif type = "string" | type = "longstr"
    char *$(name);                      //  $(field.?'':)
.   elsif type = "chunk"
    z$(type)_t *$(name);                //  $(field.?'':)
.   endif
.endfor
};

//  --------------------------------------------------------------------------
//  Network data encoding macros

//  Put a block of octets to the frame
#define PUT_OCTETS(host,size) { \\
    memcpy (self->needle, (host), size); \\
    self->needle += size; \\
}

//  Get a block of octets from the frame
#define GET_OCTETS(host,size) { \\
    if (self->needle + size > self->ceiling) \\
        goto malformed; \\
    memcpy ((host), self->needle, size); \\
    self->needle += size; \\
}

//  Put a 1-byte number to the frame
#define PUT_NUMBER1(host) { \\
    *(byte *) self->needle = (host); \\
    self->needle++; \\
}

//  Put a 2-byte number to the frame
#define PUT_NUMBER2(host) { \\
    self->needle [0] = (byte) (((host) >> 8)  & 255); \\
    self->needle [1] = (byte) (((host))       & 255); \\
    self->needle += 2; \\
}

//  Put a 4-byte number to the frame
#define PUT_NUMBER4(host) { \\
    self->needle [0] = (byte) (((host) >> 24) & 255); \\
    self->needle [1] = (byte) (((host) >> 16) & 255); \\
    self->needle [2] = (byte) (((host) >> 8)  & 255); \\
    self->needle [3] = (byte) (((host))       & 255); \\
    self->needle += 4; \\
}

//  Put a 8-byte number to the frame
#define PUT_NUMBER8(host) { \\
    self->needle [0] = (byte) (((host) >> 56) & 255); \\
    self->needle [1] = (byte) (((host) >> 48) & 255); \\
    self->needle [2] = (byte) (((host) >> 40) & 255); \\
    self->needle [3] = (byte) (((host) >> 32) & 255); \\
    self->needle [4] = (byte) (((host) >> 24) & 255); \\
    self->needle [5] = (byte) (((host) >> 16) & 255); \\
    self->needle [6] = (byte) (((host) >> 8)  & 255); \\
    self->needle [7] = (byte) (((host))       & 255); \\
    self->needle += 8; \\
}

//  Get a 1-byte number from the frame
#define GET_NUMBER1(host) { \\
    if (self->needle + 1 > self->ceiling) \\
        goto malformed; \\
    (host) = *(byte *) self->needle; \\
    self->needle++; \\
}

//  Get a 2-byte number from the frame
#define GET_NUMBER2(host) { \\
    if (self->needle + 2 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint16_t) (self->needle [0]) << 8) \\
           +  (uint16_t) (self->needle [1]); \\
    self->needle += 2; \\
}

//  Get a 4-byte number from the frame
#define GET_NUMBER4(host) { \\
    if (self->needle + 4 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint32_t) (self->needle [0]) << 24) \\
           + ((uint32_t) (self->needle [1]) << 16) \\
           + ((uint32_t) (self->needle [2]) << 8) \\
           +  (uint32_t) (self->needle [3]); \\
    self->needle += 4; \\
}

//  Get a 8-byte number from the frame
#define GET_NUMBER8(host) { \\
    if (self->needle + 8 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint64_t) (self->needle [0]) << 56) \\
           + ((uint64_t) (self->needle [1]) << 48) \\
           + ((uint64_t) (self->needle [2]) << 40) \\
           + ((uint64_t) (self->needle [3]) << 32) \\
           + ((uint64_t) (self->needle [4]) << 24) \\
           + ((uint64_t) (self->needle [5]) << 16) \\
           + ((uint64_t) (self->needle [6]) << 8) \\
           +  (uint64_t) (self->needle [7]); \\
    self->needle += 8; \\
}

//  Put a string to the frame
#define PUT_STRING(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER1 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a string from the frame
#define GET_STRING(host) { \\
    size_t string_size; \\
    GET_NUMBER1 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) \\
        goto malformed; \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}

//  Put a long string to the frame
#define PUT_LONGSTR(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER4 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a long string from the frame
#define GET_LONGSTR(host) { \\
    size_t string_size; \\
    GET_NUMBER4 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) \\
        goto malformed; \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}


//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
$(class.name)_new (int id)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    self->id = id;
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties
.for class.field
.   if type = "string" | type = "longstr"
        free (self->$(name));
.   elsif type = "chunk"
        z$(type)_destroy (&self->$(name));
.   endif
.endfor

        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Parse a $(class.name) from zmtp_msg_t. Returns a new object, or NULL if
//  the message could not be parsed, or was NULL.

$(class.name)_t *
$(class.name)_decode (zmtp_msg_t **msg_p)
{
    assert (msg_p);
    zmtp_msg_t *msg = *msg_p;
    if (msg == NULL)
        return NULL;
        
    //  Get and check protocol signature
    $(class.name)_t *self = $(class.name)_new (0);
    self->needle = zmtp_msg_data (msg);
    self->ceiling = self->needle + zmtp_msg_size (msg);
    uint16_t signature;
    GET_NUMBER2 (signature);
    if (signature != (0xAAA0 | $(class.signature)))
        goto empty;             //  Invalid signature

    //  Get message id and parse per message type
    GET_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            GET_NUMBER$(size) (self->$(name));
.           if defined (field.value)
            if (self->$(name) != $(field.value:))
                goto malformed;
.           endif
.       elsif type = "octets"
            GET_OCTETS (self->$(name), $(size));
.       elsif type = "string"
            GET_STRING (self->$(name));
.           if defined (field.value)
            if (strneq (self->$(name), "$(field.value:)"))
                goto malformed;
.           endif
.       elsif type = "longstr"
            GET_LONGSTR (self->$(name));
.       elsif type = "chunk"
            {
                size_t chunk_size;
                GET_NUMBER4 (chunk_size);
                if (self->needle + chunk_size > (self->ceiling))
                    goto malformed;
                self->$(name) = zchunk_new (self->needle, chunk_size);
                self->needle += chunk_size;
            }
.       endif
.   endfor
            break;

.endfor
        default:
            goto malformed;
    }
    //  Successful return
    zmtp_msg_destroy (msg_p);
    return self;

    //  Error returns
    malformed:
        printf ("E: malformed message '%d'\\n", self->id);
    empty:
        zmtp_msg_destroy (msg_p);
        $(class.name)_destroy (&self);
        return (NULL);
}


//  --------------------------------------------------------------------------
//  Encode $(class.name) into a message. Returns a newly created object
//  or NULL if error. Use when not in control of sending the message.
//  Destroys the $(class.name)_t instance.

zmtp_msg_t *
$(class.name)_encode ($(class.name)_t **self_p)
{
    assert (self_p);
    assert (*self_p);
    $(class.name)_t *self = *self_p;

    size_t msg_size = 2 + 1;          //  Signature and message ID
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            //  $(name) is a $(size)-byte integer
            msg_size += $(size);
.       elsif type = "octets"
            //  $(name) is a block of $(size) bytes
            msg_size += $(size);
.       elsif type = "string"
            //  $(name) is a string with 1-byte length
.           if defined (field.value)
            msg_size += 1 + strlen ("$(field.value:)");
.           else
            msg_size++;       //  Size is one octet
            if (self->$(name))
                msg_size += strlen (self->$(name));
.           endif
.       elsif type = "longstr"
            //  $(name) is a string with 4-byte length
            msg_size += 4;
            if (self->$(name))
                msg_size += strlen (self->$(name));
.       elsif type = "chunk"
            //  $(name) is a chunk with 4-byte length
            msg_size += 4;
            if (self->$(name))
                msg_size += zchunk_size (self->$(name));
.       endif
.   endfor
            break;
            
.endfor
        default:
            printf ("E: bad message type '%d', not sent\\n", self->id);
            //  No recovery, this is a fatal application error
            assert (false);
    }
    //  Now serialize message into the frame
    byte *data = (byte *) zmalloc (msg_size);
    zmtp_msg_t *msg = zmtp_msg_new (0, &data, msg_size);
    self->needle = zmtp_msg_data (msg);

    //  Each message frame starts with protocol signature
    PUT_NUMBER2 (0xAAA0 | $(class.signature));
    PUT_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            PUT_NUMBER$(size) ($(field.value:));
.           else
            PUT_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            PUT_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            PUT_STRING ("$(field.value:)");
.           else
            if (self->$(name)) {
                PUT_STRING (self->$(name));
            }
            else
                PUT_NUMBER1 (0);    //  Empty string
.           endif
.       elsif type = "longstr"
            if (self->$(name)) {
                PUT_LONGSTR (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty string
.       elsif type = "chunk"
            if (self->$(name)) {
                PUT_NUMBER4 (zchunk_size (self->$(name)));
                memcpy (self->needle,
                        zchunk_data (self->$(name)),
                        zchunk_size (self->$(name)));
                self->needle += zchunk_size (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty chunk
.       endif
.   endfor
            break;

.endfor
    }
    //  Destroy $(class.name) object
    $(class.name)_destroy (self_p);
    return msg;
}


//  --------------------------------------------------------------------------
//  Receive and parse a $(class.name) from the socket. Returns new object or
//  NULL if error. Will block if there's no message waiting.

$(class.name)_t *
$(class.name)_recv (zmtp_dealer_t *input)
{
    assert (input);
    zmtp_msg_t *msg = zmtp_dealer_recv (input);
    
    $(class.name)_t * $(class.name) = $(class.name)_decode (&msg);
    return $(class.name);
}


//  --------------------------------------------------------------------------
//  Send the $(class.name) to the socket, and destroy it
//  Returns 0 if OK, else -1

int
$(class.name)_send ($(class.name)_t **self_p, zmtp_dealer_t *output)
{
    assert (self_p);
    assert (*self_p);
    assert (output);

    //  Encode $(class.name) message to a single message
    zmtp_msg_t *msg = $(class.name)_encode (self_p);
    if (msg && zmtp_dealer_send (output, msg) == 0)
        return 0;
    else {
        zmtp_msg_destroy (&msg);
        return -1;              //  Failed to encode, or send
    }
}


.for message
//  --------------------------------------------------------------------------
//  Send the $(message.NAME) to the socket in one step

int
$(class.name)_send_$(name) (
    zmtp_dealer_t *output\
.for field where !defined (value)
,
.   if type = "number"
    $(ctype) $(name)\
.   elsif type = "octets"
    byte *$(name)\
.   elsif type = "string" | type = "longstr"
    const char *$(name)\
.   elsif type = "chunk" 
    zchunk_t *$(name)\
.   endif
.endfor
)
{
    $(class.name)_t *self = $(class.name)_new ($(class.NAME)_$(NAME));
.for field where !defined (value)
.   if type = "number" | type = "octets" | type = "string" | type = "longstr"
    $(class.name)_set_$(name) (self, $(name));
.   elsif type = "chunk"
    zchunk_t *$(name)_copy = zchunk_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   endif
.endfor
    return $(class.name)_send (&self, output);
}


.endfor
//  --------------------------------------------------------------------------
//  Duplicate the $(class.name) message

$(class.name)_t *
$(class.name)_dup ($(class.name)_t *self)
{
    if (!self)
        return NULL;
        
    $(class.name)_t *copy = $(class.name)_new (self->id);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            copy->$(name) = self->$(name);
.       elsif type = "octets"
            memcpy (copy->$(name), self->$(name), $(size));
.       elsif type = "string" | type = "longstr"
            copy->$(name) = self->$(name)? strdup (self->$(name)): NULL;
.       elsif type = "chunk"
            copy->$(name) = self->$(name)? z$(type)_dup (self->$(name)): NULL;
.       endif
.   endfor
            break;

.endfor
    }
    return copy;
}


//  --------------------------------------------------------------------------
//  Print contents of message to stdout

void
$(class.name)_dump ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            puts ("$(MESSAGE.NAME):");
.   for field
.       if type = "number"
.           if defined (field.value)
            printf ("    $(name)=$(field.value)\\n");
.           else
            printf ("    $(name)=%ld\\n", (long) self->$(name));
.           endif
.       elsif type = "octets"
            printf ("    $(name)=[");
            int $(name)_index;
            for ($(name)_index = 0; $(name)_index < $(size); $(name)_index++) {
                if ($(name)_index && ($(name)_index % 4 == 0))
                    printf ("-");
                printf ("%02X", self->$(name) [$(name)_index]);
            }
        printf ("\\n");
.       elsif type = "string" | type = "longstr"
.           if defined (field.value)
            printf ("    $(name)=$(field.value)\\n");
.           else
            if (self->$(name))
                printf ("    $(name)='%s'\\n", self->$(name));
            else
                printf ("    $(name)=\\n");
.           endif
.       elsif type = "chunk"
            printf ("    $(name)={\\n");
            if (self->$(name))
                zchunk_print (self->$(name));
            else
                printf ("(NULL)\\n");
            printf ("    }\\n");
.       endif
.   endfor
            break;
            
.endfor
    }
}


//  --------------------------------------------------------------------------
//  Get/set the $(class.name) id

int
$(class.name)_id ($(class.name)_t *self)
{
    assert (self);
    return self->id;
}

void
$(class.name)_set_id ($(class.name)_t *self, int id)
{
    self->id = id;
}

//  --------------------------------------------------------------------------
//  Return a printable command string

const char *
$(class.name)_command ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            return ("$(MESSAGE.NAME)");
            break;
.endfor
    }
    return "?";
}

.for class.field where !defined (value)
.   if type = "number"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

$(ctype)
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name))
{
    assert (self);
    self->$(name) = $(name);
}

.   elsif type = "octets"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

byte * 
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name))
{
    assert (self);
    memcpy (self->$(name), $(name), $(size));
}

.   elsif type = "string" | type = "longstr"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

const char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, const char *format, ...)
{
    //  Format $(name) from provided arguments
    assert (self);
    char formatted [256];
    va_list argptr;
    va_start (argptr, format);
    snprintf (formatted, 255, format, argptr);
    va_end (argptr);
    formatted [255] = 0;
    free (self->$(name));
    self->$(name) = strdup (formatted);
}


.   elsif type = "chunk"
//  --------------------------------------------------------------------------
//  Get the $(name) field without transferring ownership

zchunk_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

zchunk_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    zchunk_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, zchunk_t **chunk_p)
{
    assert (self);
    assert (chunk_p);
    zchunk_destroy (&self->$(name));
    self->$(name) = *chunk_p;
    *chunk_p = NULL;
}
.   endif

.endfor

//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  @selftest
    //  Simple create/destroy test
    $(class.name)_t *self = $(class.name)_new (0);
    assert (self);
    $(class.name)_destroy (&self);

    //  Encode/decode and verify each message type
    $(class.name)_t *copy;
.for class.message
    self = $(class.name)_new ($(CLASS.NAME)_$(MESSAGE.NAME));
    
    //  Check that _dup works on empty message
    copy = $(class.name)_dup (self);
    assert (copy);
    $(class.name)_destroy (&copy);

.   for field where !defined (value)
.       if type = "number"
    $(class.name)_set_$(name) (self, 123);
.       elsif type = "octets"
    byte $(name)_data [$(CLASS.NAME)_$(FIELD.NAME)_SIZE];
    memset ($(name)_data, 123, $(CLASS.NAME)_$(FIELD.NAME)_SIZE);
    $(class.name)_set_$(name) (self, $(name)_data);
.       elsif type = "string" | type = "longstr"
    $(class.name)_set_$(name) (self, "Life is short but Now lasts for ever");
.       elsif type = "chunk"
    z$(type)_t *$(message.name)_$(name) = z$(type)_new ("Captcha Diem", 12);
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       endif
.   endfor

.   for field where !defined (value) 
.       if type = "number"
    assert ($(class.name)_$(name) (self) == 123);
.       elsif type = "octets"
    assert ($(class.name)_$(name) (self) [0] == 123);
    assert ($(class.name)_$(name) (self) [$(CLASS.NAME)_$(FIELD.NAME)_SIZE - 1] == 123);
.       elsif type = "string" | type = "longstr"
    assert (streq ($(class.name)_$(name) (self), "Life is short but Now lasts for ever"));
.           elsif type = "chunk"
    assert (memcmp (zchunk_data ($(class.name)_$(name) (self)), "Captcha Diem", 12) == 0);
.       endif
.   endfor
    $(class.name)_destroy (&self);
.endfor
    //  @end

    printf ("OK\\n");
    return 0;
}
